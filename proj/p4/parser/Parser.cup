package parser;

import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory;
import compiler.Compiler;
import ast.*;

parser code {: 
  Lexer lexer;
  public Parser(Lexer lex, ComplexSymbolFactory sf) {
    super(lex, sf);
    lexer = lex;
  }
  public void report_fatal_error(String message, Object info) {
    Compiler.fatalError(message + " (" + info + ")", Compiler.EXIT_PARSING_ERROR);
  }
:};

/* keywords */
terminal INT, DOUBLE, RETURN, IF, ELSE, WHILE, FOR;

/* punctuators */
terminal SEMICOLON, LPAREN, RPAREN, LBRACK, RBRACK, LBRACE, RBRACE, ASSIGN, PLUS, MUL, SUB, DIVIDE, MODULO, PLUSASSIGN, SUBASSIGN, MULASSIGN, DIVIDEASSIGN, MODULOASSIGN;
terminal LESSTHEN, LESSTHENEQUAL, GREATERTHEN, GREATERTHENEQUAL, EQUALEQUAL, NOTEQUAL;
/* numeric literals */
terminal Integer INTCONST;
terminal Double  DOUBLECONST;
/* names */
terminal String IDENT;

non terminal Program program;
non terminal List<Decl> declList;
non terminal Decl decl;
non terminal List<Integer> arrayDecl;
non terminal List<Stmt> stmtList;
non terminal Stmt stmt;
non terminal Expr expr;
non terminal List<Expr> arrayDim;
non terminal BinaryExpr binaryExpr;

precedence right ASSIGN, PLUSASSIGN, SUBASSIGN, MULASSIGN, DIVIDEASSIGN, MODULOASSIGN;
precedence left EQUALEQUAL, NOTEQUAL;
precedence left LESSTHEN, LESSTHENEQUAL, GREATERTHEN, GREATERTHENEQUAL;
precedence left PLUS, SUB;
precedence left MUL, DIVIDE, MODULO;

precedence left ELSE; // resolve "dangling else" ambiguity
start with program;

program ::= INT IDENT:i LPAREN RPAREN LBRACE declList:dl stmtList:sl RBRACE
            {: RESULT = new Program(i, Types.INT, dl, sl); :}
          | DOUBLE IDENT:i LPAREN RPAREN LBRACE declList:dl stmtList:sl RBRACE
	    {: RESULT = new Program(i, Types.DOUBLE, dl, sl); :}
;
declList ::= /* empty list */ {: RESULT = new LinkedList<Decl>(); :}
           | decl:d declList:l {: l.add(0,d); RESULT = l; :}
;
decl ::= INT IDENT:i arrayDecl:a SEMICOLON {: RESULT = new Decl(i, Types.INT, a); :} 
       | DOUBLE IDENT:i arrayDecl:a SEMICOLON {: RESULT = new Decl(i, Types. DOUBLE, a); :}
;
arrayDecl ::= /* empty list */ {: RESULT = new LinkedList<Integer>(); :}
            | LBRACK INTCONST:ic RBRACK arrayDecl:a {: a.add(0,ic); RESULT = a; :}
;
stmtList ::= /* empty list */ {: RESULT = new LinkedList<Stmt>(); :}
           | stmt:s stmtList:l  {: l.add(0,s); RESULT = l; :} 
;
stmt ::= expr:e SEMICOLON {: RESULT = new ExprStmt(e); :}
       | RETURN expr:e SEMICOLON {: RESULT = new ReturnStmt(e); :}
       | LBRACE stmtList:l RBRACE {: RESULT = new BlockStmt(l); :}
       | IF LPAREN expr:e RPAREN stmt:s
         {: RESULT = new IfStmt(e, s); :}
       | IF LPAREN expr:e RPAREN stmt:s1 ELSE stmt:s2
         {: RESULT = new IfStmt(e, s1, s2); :}
       | SEMICOLON {: RESULT = new EmptyStmt(); :}
       | WHILE LPAREN expr:e RPAREN stmt:s {: RESULT = new WhileStmt(e, s); :}
       | FOR LPAREN expr:e1 SEMICOLON expr:e2 SEMICOLON expr:e3 RPAREN stmt:s {: RESULT = new ForStmt(e1, e2, e3, s); :}
;
expr ::= INTCONST:ic {: RESULT = new IntConstExpr(ic); :}
       | DOUBLECONST:dc {: RESULT = new DoubleConstExpr(dc); :}
       | IDENT:i {: RESULT = new IdentExpr(i); :}
       | IDENT:i arrayDim:a {: RESULT = new ArrayExpr(i, a); :}
       | LPAREN expr:e RPAREN {: RESULT = e; :}
       | binaryExpr:e {: RESULT = e; :}
;
arrayDim ::= LBRACK expr:e RBRACK {: RESULT = new LinkedList<Expr>(); RESULT.add(e); :}
           | LBRACK expr:e RBRACK arrayDim:a {: a.add(0,e); RESULT = a; :}
;

binaryExpr ::= expr:e1 PLUS expr:e2 {: RESULT = new BinaryExpr(e1, BinaryExpr.PLUS, e2); :}
             | expr:e1 SUB expr:e2 {: RESULT = new BinaryExpr(e1, BinaryExpr.SUB, e2); :}
             | expr:e1 MUL expr:e2 {: RESULT = new BinaryExpr(e1, BinaryExpr.MUL, e2); :}
             | expr:e1 DIVIDE expr:e2 {: RESULT = new BinaryExpr(e1, BinaryExpr.DIVIDE, e2); :}
             | expr:e1 MODULO expr:e2 {: RESULT = new BinaryExpr(e1, BinaryExpr.MODULO, e2); :}
             | expr:e1 ASSIGN expr:e2 {: RESULT = new BinaryExpr(e1, BinaryExpr.ASSIGN, e2); :}   
             | expr:e1 PLUSASSIGN expr:e2 {: RESULT = new BinaryExpr(e1, BinaryExpr.PLUSASSIGN, e2); :}   
             | expr:e1 SUBASSIGN expr:e2 {: RESULT = new BinaryExpr(e1, BinaryExpr.SUBASSIGN, e2); :}                
             | expr:e1 MULASSIGN expr:e2 {: RESULT = new BinaryExpr(e1, BinaryExpr.MULASSIGN, e2); :}   
             | expr:e1 DIVIDEASSIGN expr:e2 {: RESULT = new BinaryExpr(e1, BinaryExpr.DIVIDEASSIGN, e2); :}   
             | expr:e1 MODULOASSIGN expr:e2 {: RESULT = new BinaryExpr(e1, BinaryExpr.MODULOASSIGN, e2); :}
             | expr:e1 LESSTHEN expr:e2 {: RESULT = new BinaryExpr(e1, BinaryExpr.LESSTHEN, e2); :}   
             | expr:e1 LESSTHENEQUAL expr:e2 {: RESULT = new BinaryExpr(e1, BinaryExpr.LESSTHENEQUAL, e2); :}   
             | expr:e1 GREATERTHEN expr:e2 {: RESULT = new BinaryExpr(e1, BinaryExpr.GREATERTHEN, e2); :}                
             | expr:e1 GREATERTHENEQUAL expr:e2 {: RESULT = new BinaryExpr(e1, BinaryExpr.GREATERTHENEQUAL, e2); :}   
             | expr:e1 EQUALEQUAL expr:e2 {: RESULT = new BinaryExpr(e1, BinaryExpr.EQUALEQUAL, e2); :}   
             | expr:e1 NOTEQUAL expr:e2 {: RESULT = new BinaryExpr(e1, BinaryExpr.NOTEQUAL, e2); :} 
;


